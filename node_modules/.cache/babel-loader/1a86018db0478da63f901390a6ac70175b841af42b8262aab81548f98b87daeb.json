{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{auth,signInWithGoogle as firebaseSignInWithGoogle,logOut as firebaseLogOut}from\"../firebase\";import{onAuthStateChanged}from\"firebase/auth\";import{GoogleAuthProvider,signInWithPopup,signOut}from'firebase/auth';// Define API URL\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const AuthContext=/*#__PURE__*/createContext();export function useAuth(){return useContext(AuthContext);}export function AuthProvider(_ref){let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,user=>{console.log(\"Auth state changed:\",user);setCurrentUser(user);setLoading(false);});return unsubscribe;},[]);// Create or update user in MongoDB\nconst syncUserWithMongoDB=async user=>{if(!user)return null;try{// Check if user exists in MongoDB\nconst response=await fetch(`${API_URL}/api/users?email=${encodeURIComponent(user.email)}`);if(response.ok){const data=await response.json();if(data.exists){// User exists, update profile if needed\nreturn await fetchUserProfile(user.uid);}else{// Create new user\nconst createResponse=await fetch(`${API_URL}/api/users`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({uid:user.uid,email:user.email,display_name:user.displayName||user.email.split('@')[0],photo_url:user.photoURL||null})});if(createResponse.ok){return await fetchUserProfile(user.uid);}else{console.error('Failed to create user in MongoDB');return null;}}}else{console.error('Failed to check user in MongoDB');return null;}}catch(error){console.error(\"Error syncing user with MongoDB:\",error);return null;}};// Fetch user profile from MongoDB\nconst fetchUserProfile=async userId=>{try{const response=await fetch(`${API_URL}/api/users/${userId}`);if(response.ok){return await response.json();}else{console.error('Failed to fetch user profile');return null;}}catch(error){console.error(\"Error fetching user profile:\",error);return null;}};// Monitor authentication state\nuseEffect(()=>{const unsubscribe=onAuthStateChanged(auth,async user=>{setCurrentUser(user);if(user){try{// Sync user with MongoDB and get profile\nconst profile=await syncUserWithMongoDB(user);setUserProfile(profile);}catch(error){console.error('Error syncing user with MongoDB:',error);}}else{setUserProfile(null);}setLoading(false);});return unsubscribe;},[currentUser,syncUserWithMongoDB]);async function signInWithGoogle(){const provider=new GoogleAuthProvider();try{const result=await signInWithPopup(auth,provider);return result.user;}catch(error){console.error('Error signing in with Google:',error);throw error;}}async function logOut(){try{await signOut(auth);}catch(error){console.error('Error signing out:',error);throw error;}}// Update user profile in MongoDB\nconst updateUserProfile=async profileData=>{if(!currentUser){throw new Error(\"No authenticated user\");}try{const response=await fetch(`${API_URL}/api/users/${currentUser.uid}/profile`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(profileData)});if(response.ok){const updatedProfile=await response.json();setUserProfile(updatedProfile);return updatedProfile;}else{throw new Error('Failed to update profile');}}catch(error){console.error(\"Error updating profile:\",error);throw error;}};// Save coding history to MongoDB\nconst saveCodeHistory=async codeData=>{if(!currentUser)return;try{const response=await fetch(`${API_URL}/api/history`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:currentUser.uid,...codeData})});if(!response.ok){throw new Error('Failed to save code history');}}catch(error){console.error('Error saving code history:',error);throw error;}};const value={currentUser,userProfile,loading,signInWithGoogle,logOut,updateUserProfile,saveCodeHistory};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","auth","signInWithGoogle","firebaseSignInWithGoogle","logOut","firebaseLogOut","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","signOut","jsx","_jsx","API_URL","process","env","REACT_APP_API_URL","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","unsubscribe","user","console","log","syncUserWithMongoDB","response","fetch","encodeURIComponent","email","ok","data","json","exists","fetchUserProfile","uid","createResponse","method","headers","body","JSON","stringify","display_name","displayName","split","photo_url","photoURL","error","userId","profile","provider","result","updateUserProfile","profileData","Error","updatedProfile","saveCodeHistory","codeData","value","Provider"],"sources":["C:/Users/konda/Videos/Ai-powered-debugger-master/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { \n  auth, \n  signInWithGoogle as firebaseSignInWithGoogle, \n  logOut as firebaseLogOut \n} from \"../firebase\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';\n\n// Define API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      console.log(\"Auth state changed:\", user);\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  // Create or update user in MongoDB\n  const syncUserWithMongoDB = async (user) => {\n    if (!user) return null;\n    \n    try {\n      // Check if user exists in MongoDB\n      const response = await fetch(`${API_URL}/api/users?email=${encodeURIComponent(user.email)}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        if (data.exists) {\n          // User exists, update profile if needed\n          return await fetchUserProfile(user.uid);\n        } else {\n          // Create new user\n          const createResponse = await fetch(`${API_URL}/api/users`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              uid: user.uid,\n              email: user.email,\n              display_name: user.displayName || user.email.split('@')[0],\n              photo_url: user.photoURL || null\n            })\n          });\n          \n          if (createResponse.ok) {\n            return await fetchUserProfile(user.uid);\n          } else {\n            console.error('Failed to create user in MongoDB');\n            return null;\n          }\n        }\n      } else {\n        console.error('Failed to check user in MongoDB');\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error syncing user with MongoDB:\", error);\n      return null;\n    }\n  };\n\n  // Fetch user profile from MongoDB\n  const fetchUserProfile = async (userId) => {\n    try {\n      const response = await fetch(`${API_URL}/api/users/${userId}`);\n      \n      if (response.ok) {\n        return await response.json();\n      } else {\n        console.error('Failed to fetch user profile');\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      return null;\n    }\n  };\n\n  // Monitor authentication state\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        try {\n          // Sync user with MongoDB and get profile\n          const profile = await syncUserWithMongoDB(user);\n          setUserProfile(profile);\n        } catch (error) {\n          console.error('Error syncing user with MongoDB:', error);\n        }\n      } else {\n        setUserProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, [currentUser, syncUserWithMongoDB]);\n\n  async function signInWithGoogle() {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(auth, provider);\n      return result.user;\n    } catch (error) {\n      console.error('Error signing in with Google:', error);\n      throw error;\n    }\n  }\n\n  async function logOut() {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  }\n\n  // Update user profile in MongoDB\n  const updateUserProfile = async (profileData) => {\n    if (!currentUser) {\n      throw new Error(\"No authenticated user\");\n    }\n    \n    try {\n      const response = await fetch(`${API_URL}/api/users/${currentUser.uid}/profile`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(profileData)\n      });\n      \n      if (response.ok) {\n        const updatedProfile = await response.json();\n        setUserProfile(updatedProfile);\n        return updatedProfile;\n      } else {\n        throw new Error('Failed to update profile');\n      }\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      throw error;\n    }\n  };\n\n  // Save coding history to MongoDB\n  const saveCodeHistory = async (codeData) => {\n    if (!currentUser) return;\n    \n    try {\n      const response = await fetch(`${API_URL}/api/history`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: currentUser.uid,\n          ...codeData\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to save code history');\n      }\n    } catch (error) {\n      console.error('Error saving code history:', error);\n      throw error;\n    }\n  };\n\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    signInWithGoogle,\n    logOut,\n    updateUserProfile,\n    saveCodeHistory\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}