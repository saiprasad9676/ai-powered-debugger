{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\konda\\\\Videos\\\\Ai-powered-debugger-master\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { auth, signInWithGoogle, logOut } from \"../firebase\";\nimport { onAuthStateChanged, getRedirectResult } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Handle redirect result\n  useEffect(() => {\n    const handleRedirectResult = async () => {\n      try {\n        const result = await getRedirectResult(auth);\n        if (result && result.user) {\n          console.log(\"Redirect sign-in successful:\", result.user);\n        }\n      } catch (error) {\n        console.error(\"Error with redirect sign-in:\", error);\n      }\n    };\n    handleRedirectResult();\n  }, []);\n\n  // Create or update user in MongoDB when Firebase auth state changes\n  const syncUserWithMongoDB = async user => {\n    if (!user) return null;\n    try {\n      const response = await fetch(`${API_URL}/api/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: user.email,\n          display_name: user.displayName || user.email.split('@')[0],\n          photo_url: user.photoURL || null\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const userData = await response.json();\n      return userData;\n    } catch (error) {\n      console.error(\"Error syncing user with MongoDB:\", error);\n      return null;\n    }\n  };\n\n  // Fetch user profile from MongoDB\n  const fetchUserProfile = async userId => {\n    try {\n      const response = await fetch(`${API_URL}/api/users/${userId}`);\n      if (!response.ok) {\n        return null;\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      return null;\n    }\n  };\n\n  // Listen for authentication state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        console.log(\"Auth state changed - user is logged in:\", user.uid);\n\n        // Sync user with MongoDB and get profile\n        const dbUser = await syncUserWithMongoDB(user);\n        if (dbUser) {\n          const userProfile = await fetchUserProfile(dbUser._id);\n          setUserProfile(userProfile);\n        }\n      } else {\n        console.log(\"Auth state changed - no user is logged in\");\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Sign in with Google\n  const googleSignIn = async () => {\n    try {\n      const user = await signInWithGoogle();\n      return user;\n    } catch (error) {\n      console.error(\"Error signing in with Google:\", error);\n      throw error;\n    }\n  };\n\n  // Sign out\n  const signOutUser = async () => {\n    try {\n      await logOut();\n      return true;\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      return false;\n    }\n  };\n\n  // Create or update user profile\n  const updateUserProfile = async profileData => {\n    if (!currentUser) {\n      console.error(\"Cannot update profile: No user is logged in\");\n      return false;\n    }\n    try {\n      console.log(\"Updating profile for user:\", currentUser.uid);\n      console.log(\"Profile data:\", profileData);\n\n      // Get the MongoDB user first\n      const dbUser = await syncUserWithMongoDB(currentUser);\n      if (!dbUser) {\n        console.error(\"Failed to get MongoDB user\");\n        return false;\n      }\n\n      // Update profile in MongoDB\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/profile`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(profileData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const updatedUser = await response.json();\n      setUserProfile(updatedUser);\n      console.log(\"Profile updated successfully in MongoDB\");\n      return true;\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      console.error(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\n      return false;\n    }\n  };\n\n  // Save coding history to MongoDB\n  const saveCodeHistory = async codeData => {\n    if (!currentUser) return false;\n    try {\n      // Get the MongoDB user first\n      const dbUser = await syncUserWithMongoDB(currentUser);\n      if (!dbUser) {\n        console.error(\"Failed to get MongoDB user\");\n        return false;\n      }\n\n      // Save history to MongoDB\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/history`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(codeData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Error saving code history:\", error);\n      return false;\n    }\n  };\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    googleSignIn,\n    signOutUser,\n    updateUserProfile,\n    saveCodeHistory\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"5inz8PLJQeC6XxelaI2loG7rsGY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","auth","signInWithGoogle","logOut","onAuthStateChanged","getRedirectResult","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","handleRedirectResult","result","user","console","log","error","syncUserWithMongoDB","response","fetch","method","headers","body","JSON","stringify","email","display_name","displayName","split","photo_url","photoURL","ok","Error","status","userData","json","fetchUserProfile","userId","unsubscribe","uid","dbUser","_id","googleSignIn","signOutUser","updateUserProfile","profileData","updatedUser","Object","getOwnPropertyNames","saveCodeHistory","codeData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/konda/Videos/Ai-powered-debugger-master/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { \r\n  auth, \r\n  signInWithGoogle, \r\n  logOut \r\n} from \"../firebase\";\r\nimport { \r\n  onAuthStateChanged, \r\n  getRedirectResult \r\n} from \"firebase/auth\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Handle redirect result\r\n  useEffect(() => {\r\n    const handleRedirectResult = async () => {\r\n      try {\r\n        const result = await getRedirectResult(auth);\r\n        if (result && result.user) {\r\n          console.log(\"Redirect sign-in successful:\", result.user);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error with redirect sign-in:\", error);\r\n      }\r\n    };\r\n\r\n    handleRedirectResult();\r\n  }, []);\r\n\r\n  // Create or update user in MongoDB when Firebase auth state changes\r\n  const syncUserWithMongoDB = async (user) => {\r\n    if (!user) return null;\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/api/users`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: user.email,\r\n          display_name: user.displayName || user.email.split('@')[0],\r\n          photo_url: user.photoURL || null\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const userData = await response.json();\r\n      return userData;\r\n    } catch (error) {\r\n      console.error(\"Error syncing user with MongoDB:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch user profile from MongoDB\r\n  const fetchUserProfile = async (userId) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/users/${userId}`);\r\n      if (!response.ok) {\r\n        return null;\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching user profile:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Listen for authentication state changes\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      if (user) {\r\n        console.log(\"Auth state changed - user is logged in:\", user.uid);\r\n        \r\n        // Sync user with MongoDB and get profile\r\n        const dbUser = await syncUserWithMongoDB(user);\r\n        if (dbUser) {\r\n          const userProfile = await fetchUserProfile(dbUser._id);\r\n          setUserProfile(userProfile);\r\n        }\r\n      } else {\r\n        console.log(\"Auth state changed - no user is logged in\");\r\n        setUserProfile(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Sign in with Google\r\n  const googleSignIn = async () => {\r\n    try {\r\n      const user = await signInWithGoogle();\r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Error signing in with Google:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOutUser = async () => {\r\n    try {\r\n      await logOut();\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error signing out:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Create or update user profile\r\n  const updateUserProfile = async (profileData) => {\r\n    if (!currentUser) {\r\n      console.error(\"Cannot update profile: No user is logged in\");\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      console.log(\"Updating profile for user:\", currentUser.uid);\r\n      console.log(\"Profile data:\", profileData);\r\n      \r\n      // Get the MongoDB user first\r\n      const dbUser = await syncUserWithMongoDB(currentUser);\r\n      if (!dbUser) {\r\n        console.error(\"Failed to get MongoDB user\");\r\n        return false;\r\n      }\r\n      \r\n      // Update profile in MongoDB\r\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(profileData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const updatedUser = await response.json();\r\n      setUserProfile(updatedUser);\r\n      \r\n      console.log(\"Profile updated successfully in MongoDB\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      console.error(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Save coding history to MongoDB\r\n  const saveCodeHistory = async (codeData) => {\r\n    if (!currentUser) return false;\r\n\r\n    try {\r\n      // Get the MongoDB user first\r\n      const dbUser = await syncUserWithMongoDB(currentUser);\r\n      if (!dbUser) {\r\n        console.error(\"Failed to get MongoDB user\");\r\n        return false;\r\n      }\r\n      \r\n      // Save history to MongoDB\r\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/history`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(codeData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error saving code history:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    googleSignIn,\r\n    signOutUser,\r\n    updateUserProfile,\r\n    saveCodeHistory\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}