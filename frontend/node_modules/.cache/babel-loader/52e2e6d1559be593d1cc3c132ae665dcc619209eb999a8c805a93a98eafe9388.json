{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{auth,signInWithGoogle,logOut}from\"../firebase\";import{onAuthStateChanged,getRedirectResult}from\"firebase/auth\";import{jsx as _jsx}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);// Handle redirect result\nuseEffect(()=>{const handleRedirectResult=async()=>{try{const result=await getRedirectResult(auth);if(result&&result.user){console.log(\"Redirect sign-in successful:\",result.user);}}catch(error){console.error(\"Error handling redirect result:\",error);}};handleRedirectResult();},[]);// Create or update user in MongoDB when Firebase auth state changes\nconst syncUserWithMongoDB=async user=>{if(!user)return null;try{const response=await fetch(`${API_URL}/api/users`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:user.email,display_name:user.displayName||user.email.split('@')[0],photo_url:user.photoURL||null})});if(!response.ok){throw new Error(`HTTP Error! Status: ${response.status}`);}const userData=await response.json();return userData;}catch(error){console.error(\"Error syncing user with MongoDB:\",error);return null;}};// Fetch user profile from MongoDB\nconst fetchUserProfile=async userId=>{if(!userId)return null;try{const response=await fetch(`${API_URL}/api/users/${userId}`);if(!response.ok){throw new Error(`HTTP Error! Status: ${response.status}`);}const profileData=await response.json();return profileData;}catch(error){console.error(\"Error fetching user profile:\",error);return null;}};// Monitor authentication state\nuseEffect(()=>{const unsubscribe=onAuthStateChanged(auth,async user=>{setCurrentUser(user);if(user){// Sync user with MongoDB and get profile\nconst dbUser=await syncUserWithMongoDB(user);if(dbUser){const userProfile=await fetchUserProfile(dbUser._id);setUserProfile(userProfile);}}else{setUserProfile(null);}setLoading(false);});return unsubscribe;},[]);// Google sign-in handler\nconst googleSignIn=async()=>{try{const user=await signInWithGoogle();return user;}catch(error){console.error(\"Error in googleSignIn:\",error);throw error;}};// Update user profile (name, preferences, etc.)\nconst updateUserProfile=async profileData=>{if(!currentUser){throw new Error(\"No authenticated user\");}try{// Get the MongoDB user first\nconst dbUser=await syncUserWithMongoDB(currentUser);if(!dbUser){console.error(\"Failed to get MongoDB user\");throw new Error(\"Failed to get user reference\");}// Update profile in MongoDB\nconst response=await fetch(`${API_URL}/api/users/${dbUser._id}/profile`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(profileData)});if(!response.ok){throw new Error(`HTTP Error! Status: ${response.status}`);}const updatedProfile=await response.json();setUserProfile(updatedProfile);console.log(\"Profile updated successfully in MongoDB\");return updatedProfile;}catch(error){console.error(\"Error updating profile:\",error);throw error;}};// Save coding history to MongoDB\nconst saveCodeHistory=async historyData=>{if(!currentUser){console.error(\"Cannot save history: No authenticated user\");return null;}try{// Get the MongoDB user first\nconst dbUser=await syncUserWithMongoDB(currentUser);if(!dbUser){console.error(\"Failed to get MongoDB user\");return null;}// Save history to MongoDB\nconst response=await fetch(`${API_URL}/api/users/${dbUser._id}/history`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({...historyData,timestamp:new Date().toISOString()})});if(!response.ok){throw new Error(`HTTP Error! Status: ${response.status}`);}const savedHistory=await response.json();return savedHistory;}catch(error){console.error(\"Error saving code history:\",error);return null;}};const value={currentUser,userProfile,loading,googleSignIn,logOut,updateUserProfile,saveCodeHistory};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","auth","signInWithGoogle","logOut","onAuthStateChanged","getRedirectResult","jsx","_jsx","API_URL","process","env","REACT_APP_API_URL","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","handleRedirectResult","result","user","console","log","error","syncUserWithMongoDB","response","fetch","method","headers","body","JSON","stringify","email","display_name","displayName","split","photo_url","photoURL","ok","Error","status","userData","json","fetchUserProfile","userId","profileData","unsubscribe","dbUser","_id","googleSignIn","updateUserProfile","updatedProfile","saveCodeHistory","historyData","timestamp","Date","toISOString","savedHistory","value","Provider"],"sources":["C:/Users/konda/Videos/Ai-powered-debugger-master/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { \r\n  auth, \r\n  signInWithGoogle, \r\n  logOut \r\n} from \"../firebase\";\r\nimport { \r\n  onAuthStateChanged, \r\n  getRedirectResult \r\n} from \"firebase/auth\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Handle redirect result\r\n  useEffect(() => {\r\n    const handleRedirectResult = async () => {\r\n      try {\r\n        const result = await getRedirectResult(auth);\r\n        if (result && result.user) {\r\n          console.log(\"Redirect sign-in successful:\", result.user);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error handling redirect result:\", error);\r\n      }\r\n    };\r\n\r\n    handleRedirectResult();\r\n  }, []);\r\n\r\n  // Create or update user in MongoDB when Firebase auth state changes\r\n  const syncUserWithMongoDB = async (user) => {\r\n    if (!user) return null;\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/api/users`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: user.email,\r\n          display_name: user.displayName || user.email.split('@')[0],\r\n          photo_url: user.photoURL || null\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP Error! Status: ${response.status}`);\r\n      }\r\n      \r\n      const userData = await response.json();\r\n      return userData;\r\n    } catch (error) {\r\n      console.error(\"Error syncing user with MongoDB:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch user profile from MongoDB\r\n  const fetchUserProfile = async (userId) => {\r\n    if (!userId) return null;\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/api/users/${userId}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP Error! Status: ${response.status}`);\r\n      }\r\n      \r\n      const profileData = await response.json();\r\n      return profileData;\r\n    } catch (error) {\r\n      console.error(\"Error fetching user profile:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Monitor authentication state\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      \r\n      if (user) {\r\n        // Sync user with MongoDB and get profile\r\n        const dbUser = await syncUserWithMongoDB(user);\r\n        if (dbUser) {\r\n          const userProfile = await fetchUserProfile(dbUser._id);\r\n          setUserProfile(userProfile);\r\n        }\r\n      } else {\r\n        setUserProfile(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Google sign-in handler\r\n  const googleSignIn = async () => {\r\n    try {\r\n      const user = await signInWithGoogle();\r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Error in googleSignIn:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Update user profile (name, preferences, etc.)\r\n  const updateUserProfile = async (profileData) => {\r\n    if (!currentUser) {\r\n      throw new Error(\"No authenticated user\");\r\n    }\r\n    \r\n    try {\r\n      // Get the MongoDB user first\r\n      const dbUser = await syncUserWithMongoDB(currentUser);\r\n      if (!dbUser) {\r\n        console.error(\"Failed to get MongoDB user\");\r\n        throw new Error(\"Failed to get user reference\");\r\n      }\r\n      \r\n      // Update profile in MongoDB\r\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(profileData),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP Error! Status: ${response.status}`);\r\n      }\r\n      \r\n      const updatedProfile = await response.json();\r\n      setUserProfile(updatedProfile);\r\n      console.log(\"Profile updated successfully in MongoDB\");\r\n      \r\n      return updatedProfile;\r\n    } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Save coding history to MongoDB\r\n  const saveCodeHistory = async (historyData) => {\r\n    if (!currentUser) {\r\n      console.error(\"Cannot save history: No authenticated user\");\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      // Get the MongoDB user first\r\n      const dbUser = await syncUserWithMongoDB(currentUser);\r\n      if (!dbUser) {\r\n        console.error(\"Failed to get MongoDB user\");\r\n        return null;\r\n      }\r\n      \r\n      // Save history to MongoDB\r\n      const response = await fetch(`${API_URL}/api/users/${dbUser._id}/history`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...historyData,\r\n          timestamp: new Date().toISOString()\r\n        }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP Error! Status: ${response.status}`);\r\n      }\r\n      \r\n      const savedHistory = await response.json();\r\n      return savedHistory;\r\n    } catch (error) {\r\n      console.error(\"Error saving code history:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    googleSignIn,\r\n    logOut,\r\n    updateUserProfile,\r\n    saveCodeHistory\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}