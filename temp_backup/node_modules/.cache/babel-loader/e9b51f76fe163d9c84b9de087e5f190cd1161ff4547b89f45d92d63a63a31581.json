{"ast":null,"code":"var _s = $RefreshSig$();\n// Import the functions you need from the Firebase SDKs\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect, signOut } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDV-K0Hu7AzKUG10oIpRnWEcAhYSDxaYYQ\",\n  authDomain: \"ai-code-debug.firebaseapp.com\",\n  projectId: \"ai-code-debug\",\n  storageBucket: \"ai-code-debug.appspot.com\",\n  messagingSenderId: \"436819563814\",\n  appId: \"1:436819563814:web:436819563814\",\n  // Using messageSenderId as a fallback if real app ID unavailable\n  measurementId: \"G-ABC123DEF\"\n};\n\n// Initialize Firebase\nconsole.log(\"Initializing Firebase...\");\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\n// Configure Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('profile');\ngoogleProvider.addScope('email');\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account',\n  client_id: '432873761264-8camv1a97cpeiq1gglih2j2klq2p97m1.apps.googleusercontent.com' // Your OAuth client ID\n});\n\n// Sign in with Google function\nconst signInWithGoogle = async () => {\n  _s();\n  try {\n    console.log(\"Attempting Google sign-in...\");\n    auth.useDeviceLanguage();\n    const result = await signInWithPopup(auth, googleProvider);\n    console.log(\"Sign-in successful\");\n    return result.user;\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    console.error(\"Error code:\", error.code);\n    console.error(\"Error message:\", error.message);\n    if (error.code === 'auth/popup-closed-by-user') {\n      console.log(\"User closed the popup\");\n    } else if (error.code === 'auth/popup-blocked') {\n      console.log(\"Popup was blocked by the browser\");\n      // You could try redirect here as fallback\n    }\n    throw error;\n  }\n};\n\n// Sign out function\n_s(signInWithGoogle, \"BcOTqc4wwa4CxJGcpsWeXUvpe98=\", false, function () {\n  return [auth.useDeviceLanguage];\n});\nconst logOut = async () => {\n  try {\n    await signOut(auth);\n    console.log(\"Sign-out successful\");\n    return true;\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n    return false;\n  }\n};\n\n// Export only what's needed\nexport { auth, signInWithGoogle, logOut, signInWithRedirect, GoogleAuthProvider };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signInWithRedirect","signOut","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","app","auth","googleProvider","addScope","setCustomParameters","prompt","client_id","signInWithGoogle","_s","useDeviceLanguage","result","user","error","code","message","logOut"],"sources":["C:/Users/konda/Videos/Ai-powered-debugger-master/frontend/src/firebase.js"],"sourcesContent":["// Import the functions you need from the Firebase SDKs\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { \r\n  getAuth, \r\n  GoogleAuthProvider, \r\n  signInWithPopup, \r\n  signInWithRedirect, \r\n  signOut \r\n} from \"firebase/auth\";\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDV-K0Hu7AzKUG10oIpRnWEcAhYSDxaYYQ\",\r\n  authDomain: \"ai-code-debug.firebaseapp.com\",\r\n  projectId: \"ai-code-debug\",\r\n  storageBucket: \"ai-code-debug.appspot.com\",\r\n  messagingSenderId: \"436819563814\",\r\n  appId: \"1:436819563814:web:436819563814\",  // Using messageSenderId as a fallback if real app ID unavailable\r\n  measurementId: \"G-ABC123DEF\"\r\n};\r\n\r\n// Initialize Firebase\r\nconsole.log(\"Initializing Firebase...\");\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\n\r\n// Configure Google Auth Provider\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('profile');\r\ngoogleProvider.addScope('email');\r\ngoogleProvider.setCustomParameters({\r\n  prompt: 'select_account',\r\n  client_id: '432873761264-8camv1a97cpeiq1gglih2j2klq2p97m1.apps.googleusercontent.com' // Your OAuth client ID\r\n});\r\n\r\n// Sign in with Google function\r\nconst signInWithGoogle = async () => {\r\n  try {\r\n    console.log(\"Attempting Google sign-in...\");\r\n    auth.useDeviceLanguage();\r\n    \r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    console.log(\"Sign-in successful\");\r\n    return result.user;\r\n  } catch (error) {\r\n    console.error(\"Error signing in with Google:\", error);\r\n    console.error(\"Error code:\", error.code);\r\n    console.error(\"Error message:\", error.message);\r\n    \r\n    if (error.code === 'auth/popup-closed-by-user') {\r\n      console.log(\"User closed the popup\");\r\n    } else if (error.code === 'auth/popup-blocked') {\r\n      console.log(\"Popup was blocked by the browser\");\r\n      // You could try redirect here as fallback\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Sign out function\r\nconst logOut = async () => {\r\n  try {\r\n    await signOut(auth);\r\n    console.log(\"Sign-out successful\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error signing out:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export only what's needed\r\nexport { \r\n  auth, \r\n  signInWithGoogle, \r\n  logOut, \r\n  signInWithRedirect, \r\n  GoogleAuthProvider\r\n}; "],"mappings":";AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,OAAO,QACF,eAAe;;AAEtB;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,+BAA+B;EAC3CC,SAAS,EAAE,eAAe;EAC1BC,aAAa,EAAE,2BAA2B;EAC1CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,iCAAiC;EAAG;EAC3CC,aAAa,EAAE;AACjB,CAAC;;AAED;AACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;AACvC,MAAMC,GAAG,GAAGhB,aAAa,CAACM,cAAc,CAAC;AACzC,MAAMW,IAAI,GAAGhB,OAAO,CAACe,GAAG,CAAC;;AAEzB;AACA,MAAME,cAAc,GAAG,IAAIhB,kBAAkB,CAAC,CAAC;AAC/CgB,cAAc,CAACC,QAAQ,CAAC,SAAS,CAAC;AAClCD,cAAc,CAACC,QAAQ,CAAC,OAAO,CAAC;AAChCD,cAAc,CAACE,mBAAmB,CAAC;EACjCC,MAAM,EAAE,gBAAgB;EACxBC,SAAS,EAAE,0EAA0E,CAAC;AACxF,CAAC,CAAC;;AAEF;AACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EACnC,IAAI;IACFV,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CE,IAAI,CAACQ,iBAAiB,CAAC,CAAC;IAExB,MAAMC,MAAM,GAAG,MAAMvB,eAAe,CAACc,IAAI,EAAEC,cAAc,CAAC;IAC1DJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,OAAOW,MAAM,CAACC,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrDd,OAAO,CAACc,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACC,IAAI,CAAC;IACxCf,OAAO,CAACc,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACE,OAAO,CAAC;IAE9C,IAAIF,KAAK,CAACC,IAAI,KAAK,2BAA2B,EAAE;MAC9Cf,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,MAAM,IAAIa,KAAK,CAACC,IAAI,KAAK,oBAAoB,EAAE;MAC9Cf,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C;IACF;IAEA,MAAMa,KAAK;EACb;AACF,CAAC;;AAED;AAAAJ,EAAA,CAxBMD,gBAAgB;EAAA,QAGlBN,IAAI,CAACQ,iBAAiB;AAAA;AAsB1B,MAAMM,MAAM,GAAG,MAAAA,CAAA,KAAY;EACzB,IAAI;IACF,MAAM1B,OAAO,CAACY,IAAI,CAAC;IACnBH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,SACEX,IAAI,EACJM,gBAAgB,EAChBQ,MAAM,EACN3B,kBAAkB,EAClBF,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}