{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\konda\\\\Videos\\\\Ai-powered-debugger-master\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { auth, signInWithGoogle, logOut } from \"../firebase\";\nimport { onAuthStateChanged, getRedirectResult } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Handle redirect result\n  useEffect(() => {\n    const handleRedirectResult = async () => {\n      try {\n        const result = await getRedirectResult(auth);\n        if (result && result.user) {\n          console.log(\"Redirect sign-in successful:\", result.user);\n        }\n      } catch (error) {\n        console.error(\"Error with redirect sign-in:\", error);\n      }\n    };\n    handleRedirectResult();\n  }, []);\n\n  // Load profile from localStorage when user logs in\n  const loadProfileFromStorage = userId => {\n    try {\n      const storedProfiles = localStorage.getItem('userProfiles');\n      if (storedProfiles) {\n        const profiles = JSON.parse(storedProfiles);\n        return profiles[userId] || null;\n      }\n    } catch (error) {\n      console.error(\"Error loading profile from localStorage:\", error);\n    }\n    return null;\n  };\n\n  // Listen for authentication state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        console.log(\"Auth state changed - user is logged in:\", user.uid);\n        // Get user profile from localStorage\n        const profile = loadProfileFromStorage(user.uid);\n        setUserProfile(profile);\n      } else {\n        console.log(\"Auth state changed - no user is logged in\");\n        setUserProfile(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Sign in with Google\n  const googleSignIn = async () => {\n    try {\n      const user = await signInWithGoogle();\n      return user;\n    } catch (error) {\n      console.error(\"Error signing in with Google:\", error);\n      throw error;\n    }\n  };\n\n  // Sign out\n  const signOutUser = async () => {\n    try {\n      await logOut();\n      return true;\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      return false;\n    }\n  };\n\n  // Create or update user profile in localStorage\n  const updateUserProfile = async profileData => {\n    if (!currentUser) {\n      console.error(\"Cannot update profile: No user is logged in\");\n      return false;\n    }\n    try {\n      const userId = currentUser.uid;\n      console.log(\"Updating profile for user:\", userId);\n      console.log(\"Profile data:\", profileData);\n\n      // Get existing profiles or initialize empty object\n      const storedProfiles = localStorage.getItem('userProfiles');\n      const profiles = storedProfiles ? JSON.parse(storedProfiles) : {};\n\n      // Update profile for current user\n      profiles[userId] = {\n        ...profileData,\n        email: currentUser.email,\n        lastUpdated: new Date().toISOString()\n      };\n\n      // Save back to localStorage\n      localStorage.setItem('userProfiles', JSON.stringify(profiles));\n      console.log(\"Profile saved to localStorage\");\n\n      // Update state\n      setUserProfile({\n        ...profileData,\n        email: currentUser.email\n      });\n      console.log(\"Profile updated successfully in state\");\n      return true;\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      console.error(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\n      return false;\n    }\n  };\n\n  // Save coding history to localStorage\n  const saveCodeHistory = async codeData => {\n    if (!currentUser) return false;\n    try {\n      const userId = currentUser.uid;\n      const timestamp = new Date().toISOString();\n\n      // Get existing history or initialize empty object\n      const storedHistory = localStorage.getItem('codeHistory');\n      const history = storedHistory ? JSON.parse(storedHistory) : {};\n\n      // Initialize user's history if not exists\n      if (!history[userId]) {\n        history[userId] = [];\n      }\n\n      // Add new entry\n      history[userId].push({\n        ...codeData,\n        timestamp\n      });\n\n      // Save back to localStorage\n      localStorage.setItem('codeHistory', JSON.stringify(history));\n      return true;\n    } catch (error) {\n      console.error(\"Error saving code history:\", error);\n      return false;\n    }\n  };\n  const value = {\n    currentUser,\n    userProfile,\n    loading,\n    googleSignIn,\n    signOutUser,\n    updateUserProfile,\n    saveCodeHistory\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"5inz8PLJQeC6XxelaI2loG7rsGY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","auth","signInWithGoogle","logOut","onAuthStateChanged","getRedirectResult","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","handleRedirectResult","result","user","console","log","error","loadProfileFromStorage","userId","storedProfiles","localStorage","getItem","profiles","JSON","parse","unsubscribe","uid","profile","googleSignIn","signOutUser","updateUserProfile","profileData","email","lastUpdated","Date","toISOString","setItem","stringify","Object","getOwnPropertyNames","saveCodeHistory","codeData","timestamp","storedHistory","history","push","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/konda/Videos/Ai-powered-debugger-master/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { \r\n  auth, \r\n  signInWithGoogle, \r\n  logOut \r\n} from \"../firebase\";\r\nimport { \r\n  onAuthStateChanged, \r\n  getRedirectResult \r\n} from \"firebase/auth\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Handle redirect result\r\n  useEffect(() => {\r\n    const handleRedirectResult = async () => {\r\n      try {\r\n        const result = await getRedirectResult(auth);\r\n        if (result && result.user) {\r\n          console.log(\"Redirect sign-in successful:\", result.user);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error with redirect sign-in:\", error);\r\n      }\r\n    };\r\n\r\n    handleRedirectResult();\r\n  }, []);\r\n\r\n  // Load profile from localStorage when user logs in\r\n  const loadProfileFromStorage = (userId) => {\r\n    try {\r\n      const storedProfiles = localStorage.getItem('userProfiles');\r\n      if (storedProfiles) {\r\n        const profiles = JSON.parse(storedProfiles);\r\n        return profiles[userId] || null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading profile from localStorage:\", error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Listen for authentication state changes\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      if (user) {\r\n        console.log(\"Auth state changed - user is logged in:\", user.uid);\r\n        // Get user profile from localStorage\r\n        const profile = loadProfileFromStorage(user.uid);\r\n        setUserProfile(profile);\r\n      } else {\r\n        console.log(\"Auth state changed - no user is logged in\");\r\n        setUserProfile(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Sign in with Google\r\n  const googleSignIn = async () => {\r\n    try {\r\n      const user = await signInWithGoogle();\r\n      return user;\r\n    } catch (error) {\r\n      console.error(\"Error signing in with Google:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOutUser = async () => {\r\n    try {\r\n      await logOut();\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error signing out:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Create or update user profile in localStorage\r\n  const updateUserProfile = async (profileData) => {\r\n    if (!currentUser) {\r\n      console.error(\"Cannot update profile: No user is logged in\");\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const userId = currentUser.uid;\r\n      console.log(\"Updating profile for user:\", userId);\r\n      console.log(\"Profile data:\", profileData);\r\n      \r\n      // Get existing profiles or initialize empty object\r\n      const storedProfiles = localStorage.getItem('userProfiles');\r\n      const profiles = storedProfiles ? JSON.parse(storedProfiles) : {};\r\n      \r\n      // Update profile for current user\r\n      profiles[userId] = {\r\n        ...profileData,\r\n        email: currentUser.email,\r\n        lastUpdated: new Date().toISOString(),\r\n      };\r\n      \r\n      // Save back to localStorage\r\n      localStorage.setItem('userProfiles', JSON.stringify(profiles));\r\n      console.log(\"Profile saved to localStorage\");\r\n      \r\n      // Update state\r\n      setUserProfile({\r\n        ...profileData,\r\n        email: currentUser.email,\r\n      });\r\n      \r\n      console.log(\"Profile updated successfully in state\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      console.error(\"Error details:\", JSON.stringify(error, Object.getOwnPropertyNames(error)));\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Save coding history to localStorage\r\n  const saveCodeHistory = async (codeData) => {\r\n    if (!currentUser) return false;\r\n\r\n    try {\r\n      const userId = currentUser.uid;\r\n      const timestamp = new Date().toISOString();\r\n      \r\n      // Get existing history or initialize empty object\r\n      const storedHistory = localStorage.getItem('codeHistory');\r\n      const history = storedHistory ? JSON.parse(storedHistory) : {};\r\n      \r\n      // Initialize user's history if not exists\r\n      if (!history[userId]) {\r\n        history[userId] = [];\r\n      }\r\n      \r\n      // Add new entry\r\n      history[userId].push({\r\n        ...codeData,\r\n        timestamp,\r\n      });\r\n      \r\n      // Save back to localStorage\r\n      localStorage.setItem('codeHistory', JSON.stringify(history));\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error saving code history:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    userProfile,\r\n    loading,\r\n    googleSignIn,\r\n    signOutUser,\r\n    updateUserProfile,\r\n    saveCodeHistory\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}